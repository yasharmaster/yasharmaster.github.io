<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yash Sharma</title>
    <description>IT Student at IIIT Allahabad</description>
    <link>http://yashsharma.tech/</link>
    <atom:link href="http://yashsharma.tech/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 18 Jun 2017 14:00:36 +0530</pubDate>
    <lastBuildDate>Sun, 18 Jun 2017 14:00:36 +0530</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>The PathQuery To Cypher Puzzle - Part 1</title>
        <description>&lt;p&gt;The PathQuery To Cypher Conversion topic, is too big to be covered in a single post, so I’ll write it in multiple parts. In this part, I’ll give you a brief overview about Path Query &amp;amp; Cypher, and will give you an insight on how we plan to query the InterMine Neo4j database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intermine-neo4j.png&quot; alt=&quot;Metagraph&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;If you have read my previous post, you would have an idea of what &lt;a href=&quot;http://intermine.org/&quot;&gt;InterMine&lt;/a&gt; is, a data warehousing system which stores complex biological data. Now, one of the main features of InterMine is its fast &amp;amp; flexible querying ability. After all what is the point of storing the data if you can’t retrieve it as per your requirements, fast enough! :)&lt;/p&gt;

&lt;p&gt;So, there are two parts to an InterMine data warehouse, front-end and back-end. The new front-end of InterMine is called &lt;a href=&quot;http://bluegenes.apps.intermine.org/&quot;&gt;BlueGenes&lt;/a&gt; and is being developed in the &lt;a href=&quot;https://github.com/intermine/bluegenes&quot;&gt;BlueGenes Repository&lt;/a&gt;. In order to retrieve any data from InterMine, users need to submit some information about the data to BlueGenes. For example, give me all the &lt;em&gt;Experiments&lt;/em&gt; in which, the &lt;em&gt;Notch&lt;/em&gt; gene in organism &lt;em&gt;Drosophila&lt;/em&gt; participates. Now based on this information, &lt;a href=&quot;http://bluegenes.apps.intermine.org/&quot;&gt;BlueGenes&lt;/a&gt; generates a &lt;em&gt;Path Query&lt;/em&gt;. The back-end part processes this &lt;em&gt;Path Query&lt;/em&gt; and returns the required data. You should give a try to the &lt;a href=&quot;http://bluegenes.apps.intermine.org/#/querybuilder&quot;&gt;BlueGenes Query Builder&lt;/a&gt;, it makes building &lt;em&gt;Path Queries&lt;/em&gt; easier, plus the UI is cool.&lt;/p&gt;

&lt;h2 id=&quot;path-query&quot;&gt;Path Query&lt;/h2&gt;

&lt;p&gt;If you would like a detailed explanation about Path Queries, you can find it at &lt;a href=&quot;http://intermine.readthedocs.io/en/latest/api/pathquery/&quot;&gt;The PathQuery API docs&lt;/a&gt;. Here I am presenting a much shorter version. First, lets look at a simple PathQuery example.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;query&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;genomic&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;view=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Gene.symbol&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;constraint&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Gene.length&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;op=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/query&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These three lines of XML make up a PathQuery which says, for all the &lt;em&gt;Genes&lt;/em&gt; which have the &lt;em&gt;length&lt;/em&gt; greater than &lt;em&gt;12345&lt;/em&gt;, give me their &lt;em&gt;Symbols&lt;/em&gt;. The PathQuery consists of the following parts.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;Paths&lt;/code&gt; - In the example, &lt;code&gt;Gene.symbol&lt;/code&gt;, &lt;code&gt;Gene.length&lt;/code&gt; are paths. Paths can be of any arbitrary length, e.g. &lt;code&gt;Protein.gene.homologues.homologue.alleles.alleleClass&lt;/code&gt; is also a valid Path.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;Views&lt;/code&gt; - These are the attributes that we want to retrieve from the database. First line in the example shows the &lt;code&gt;view&lt;/code&gt; part.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;Constraints&lt;/code&gt; - These are used restrict the matching values i.e. to filter the data. In the example, the second line is the constraint part which says &lt;code&gt;Gene.length &amp;gt; 12345&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I mentioned, I am not presenting other PathQuery parts line JOINSs, Sort Order etc to keep it simple. If you want to get in detail of PathQuery, you are welcome to checkout &lt;a href=&quot;http://intermine.readthedocs.io/en/latest/api/pathquery/&quot;&gt;The PathQuery API docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;querying-neo4j-database&quot;&gt;Querying Neo4j Database&lt;/h2&gt;

&lt;p&gt;The goal of the project this summer, is to build a prototype of InterMine which uses Neo4j database at the backend. Now, there are three possible ways to query a Neo4j database.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://neo4j.com/docs/java-reference/current/javadocs/org/neo4j/graphdb/package-summary.html&quot;&gt;Core Java API&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://neo4j.com/docs/java-reference/current/javadocs/org/neo4j/graphdb/traversal/package-summary.html&quot;&gt;Traversal Framework&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://neo4j.com/docs/developer-manual/current/cypher/&quot;&gt;Cypher&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two can only be used for creating embedded Neo4j applications i.e. they work when your application runs on same JVM as the Neo4j database instance. In other words, the developed Java application (based on Core Java API or Traversal) and the Neo4j database must reside on the same server.&lt;/p&gt;

&lt;p&gt;On the other hand, Cypher runs on &lt;a href=&quot;https://boltprotocol.org/&quot;&gt;Bolt Protocol&lt;/a&gt; which is a client-server protocol designed for database applications. It allows a client to send statements, each consisting of a single string and a set of typed parameters. The server responds to each request with a result message and an optional stream of result records. The massive advantage of this protcol is that, the Neo4j database and the client application need not be there on the same machine. So, I can run the client side application on my machine and run the queries on a database running on any machine on the planet, if it is connected to the Internet. How awesome is that! ^_^&lt;/p&gt;

&lt;p&gt;Although, Core Java API &amp;amp; Traversal framework are a bit faster than Cypher, we decided to go with Cypher because of this advantage. Now let’s discuss a bit about Cypher before moving further.&lt;/p&gt;

&lt;h2 id=&quot;cypher&quot;&gt;Cypher&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;Cypher Query Language&lt;/em&gt; (CQL) aka Cypher is a declarative language that is used to query the Neo4j graph database. Again, if you wanna go in detail, checkout &lt;a href=&quot;https://neo4j.com/docs/developer-manual/current/cypher/&quot;&gt;Neo4j Developer Manual&lt;/a&gt;. I am barely touching the surface here. So, here is a simple Cypher query example.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;span class=&quot;k&quot;&gt;MATCH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Gene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12345&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This Cypher query asks Neo4j engine to match all the nodes which are labelled as &lt;em&gt;Genes&lt;/em&gt;, and if their &lt;em&gt;length&lt;/em&gt; is greater than &lt;em&gt;12345&lt;/em&gt;, then return their &lt;em&gt;symbols&lt;/em&gt;. Yeah, this is similar to what the PathQuery example above says. The only difference is that this is in the context of a Graph Database and that was in the context of InterMine which is based on a relational database.&lt;/p&gt;

&lt;h2 id=&quot;pathquery-to-cypher&quot;&gt;PathQuery To Cypher&lt;/h2&gt;

&lt;p&gt;Now, we know that the InterMine front-end creates PathQueries which are processed by the IM Path Query Service. Also, the InterMine Neo4j Graph is queried using Cypher. So, in order for BlueGenes to query Neo4j, we need to somehow convert the Path Query into Cypher.&lt;/p&gt;

&lt;p&gt;Since the &lt;em&gt;paths&lt;/em&gt; in the path query can get arbitrarily big and many other components like JOINs, Sort Order, Constraints are there to add to the complexity, the conversion of Path Query to Cypher is not a trivial task. The converter should convert ANY path query of ANY complexity to cypher. Turns out that this is the hardest and the most time consuming part of the project.&lt;/p&gt;

&lt;p&gt;In the next part, I am going to cover the approach that we are going to use for PathQuery to Cypher conversion. So stay tuned!&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Jun 2017 13:30:00 +0530</pubDate>
        <link>http://yashsharma.tech/blog/2017/path-query-cypher-puzzle/</link>
        <guid isPermaLink="true">http://yashsharma.tech/blog/2017/path-query-cypher-puzzle/</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Metadata in Neo4j</title>
        <description>&lt;p&gt;This post describes how the Metagraph is used to store the schema in the Neo4j database.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://intermine.org/&quot;&gt;InterMine&lt;/a&gt;, as a data warehousing system, stores biological data which is loaded from various data sources. It is imperative to ensure that the loaded data conforms to the existing schema/model so as to maintain the data integrity.&lt;/p&gt;

&lt;p&gt;Presently the data model in InterMine is stored in an external &lt;a href=&quot;https://github.com/intermine/intermine/blob/dev/bio/core/core.xml&quot;&gt;XML file&lt;/a&gt;. For each entity, its attributes, references and collections are stored in this XML file. For example, a part of the file which has the BioEntity model looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;class&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;BioEntity&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is-interface=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;attribute&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;primaryIdentifier&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;java.lang.String&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;attribute&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;secondaryIdentifier&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;java.lang.String&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;attribute&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;symbol&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;java.lang.String&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;attribute&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;java.lang.String&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;reference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;organism&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;referenced-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Organism&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;collection&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;locatedFeatures&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;referenced-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Location&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;reverse-reference=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;locatedOn&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;collection&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;locations&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;referenced-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Location&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;reverse-reference=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;feature&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;collection&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ontologyAnnotations&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;referenced-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;OntologyAnnotation&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;reverse-reference=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;collection&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;synonyms&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;referenced-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Synonym&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;reverse-reference=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;collection&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dataSets&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;referenced-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;DataSet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;reverse-reference=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bioEntities&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;collection&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;publications&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;referenced-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Publication&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;reverse-reference=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bioEntities&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;collection&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;crossReferences&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;referenced-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;CrossReference&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;reverse-reference=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While developing Neo4j prototype of InterMine, to reduce the dependency on external files, it was decided to store the schema in the database itself. Neo4j being a graph database stores data in the form of Nodes and directed Relationships. This brought up two issues:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The data model must to be in the form of a graph itself so that it can be stored in the Neo4j database.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The data model should represent all the existing Nodes in the database and the Relationships among them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since the data model is a graph and it stores information about the InterMine graph, it can be called a metagraph.&lt;/p&gt;

&lt;h2 id=&quot;metagraph-structure&quot;&gt;Metagraph Structure&lt;/h2&gt;

&lt;p&gt;Each node in the metagraph is assigned &lt;code&gt;:Metagraph&lt;/code&gt; label. All the metagraph nodes are further classified into two types, NodeType and RelType. As the name suggests, each NodeType node represents a specific type of nodes and each RelType node represents a specific type of relationship in the IM graph. So each node has either &lt;code&gt;:NodeType&lt;/code&gt; or &lt;code&gt;:RelType&lt;/code&gt; label depending on which entity it represents.&lt;/p&gt;

&lt;h4 id=&quot;nodetype&quot;&gt;NodeType&lt;/h4&gt;

&lt;p&gt;A metagraph node labelled &lt;code&gt;:NodeType&lt;/code&gt; contains following two properties.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;labels&lt;/strong&gt; - A list containing the labels of the nodes that are represented by the &lt;code&gt;:NodeType&lt;/code&gt; node. For example, [“Gene”,”SequenceFeature”,”BioEntity”].&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;keys&lt;/strong&gt; - A list containing the keys of all the properties exist amongst the nodes that are represented by the &lt;code&gt;:NodeType&lt;/code&gt; node. For example, [“primaryIdentifier”, “secondaryIdentifier”, “symbol”].&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each &lt;code&gt;:NodeType&lt;/code&gt; node is uniquely identified by its labels property. So, for all the nodes in the IM graph which are labelled &lt;code&gt;:Gene&lt;/code&gt;, &lt;code&gt;:SequenceFeature&lt;/code&gt;, &lt;code&gt;:BioEntity&lt;/code&gt;, there exists one &lt;code&gt;:NodeType&lt;/code&gt; node in the metagraph which has its labels property set as [“Gene”,”SequenceFeature”,”BioEntity”].&lt;/p&gt;

&lt;h4 id=&quot;reltype&quot;&gt;RelType&lt;/h4&gt;

&lt;p&gt;A metagraph node labelled &lt;code&gt;:RelType&lt;/code&gt; contains following two properties.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;type&lt;/strong&gt; - A string denoting the &lt;code&gt;type&lt;/code&gt; of the relationships that are represented by the &lt;code&gt;:RelType&lt;/code&gt; node. For example, “HOMOLOGUE_OF”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;keys&lt;/strong&gt; - A list containing the keys of all the properties exist amongst the relationships that are represented by the &lt;code&gt;:RelType&lt;/code&gt; node. For example, [“DataSet”].&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each &lt;code&gt;:RelType&lt;/code&gt; node is uniquely identified by its type property. So, for all the relationships of type HOMOLOGUE_OF in the IM graph, there exists one &lt;code&gt;:RelType&lt;/code&gt; node in the metagraph which has its type property set as “HOMOLOGUE_OF”.&lt;/p&gt;

&lt;h4 id=&quot;relationships-in-metagraph&quot;&gt;Relationships in MetaGraph&lt;/h4&gt;

&lt;p&gt;Metagraph should not only contain information about the properties of various entities in the IM graph but it should also store how different types of nodes are connected to each other. To represent this information, we make use of Neo4j relationships.&lt;/p&gt;

&lt;p&gt;We know that each &lt;code&gt;:RelType&lt;/code&gt; node represents a type of relationships that exist in the IM graph. Now, we create two outgoing relationships/edges from each &lt;code&gt;:RelType&lt;/code&gt; node - &lt;code&gt;:StartNodeType&lt;/code&gt; and &lt;code&gt;:EndNodeType&lt;/code&gt;. These edges end on a &lt;code&gt;:NodeType&lt;/code&gt; node.&lt;/p&gt;

&lt;p&gt;Thus the metagraph path &lt;code&gt;(a:RelType)-[:StartNodeType]-&amp;gt;(b:NodeType)&lt;/code&gt; shows that the relationships represented by node &lt;code&gt;a&lt;/code&gt; starts from the nodes represented by the node &lt;code&gt;b&lt;/code&gt;. Same case follows for &lt;code&gt;:EndNodeType&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/metagraph.jpg&quot; alt=&quot;Metagraph&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;generating-metagraph&quot;&gt;Generating MetaGraph&lt;/h2&gt;

&lt;h4 id=&quot;representing-nodes&quot;&gt;Representing Nodes&lt;/h4&gt;

&lt;p&gt;The following Cypher query, creates &lt;code&gt;:NodeType&lt;/code&gt; nodes for all the nodes that exist in the IM graph.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;span class=&quot;k&quot;&gt;MATCH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metagraph&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AND&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LABELS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEYS&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metagraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NodeType&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LABELS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WHEN&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THEN&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEYS&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ELSE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;representing-relationships&quot;&gt;Representing Relationships&lt;/h4&gt;

&lt;p&gt;The following Cypher query, creates &lt;code&gt;:RelType&lt;/code&gt; nodes for all the relationships that exist in the IM graph. It also connects them to the &lt;code&gt;:NodeType&lt;/code&gt; nodes with &lt;code&gt;:StartNodeType&lt;/code&gt; and &lt;code&gt;:EndNodeType&lt;/code&gt; relationships.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;span class=&quot;k&quot;&gt;MATCH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metagraph&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AND&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metagraph&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_labels&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metagraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NodeType&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metagraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NodeType&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metagraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RelType&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-[&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StartNodeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-[&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EndNodeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WHEN&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;IS NULL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AND&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;IS NULL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THEN&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WHEN&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;IS NULL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AND&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IS&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THEN&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WHEN&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IS&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AND&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;IS NULL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THEN&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WHEN&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IS&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AND&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IS&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THEN&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once schema is generated and stored in the database, it can be accessed by the data loader at runtime. By enforing the rules of the schema, the loader maintains data integrity while loading new data to the database. You review the code related to metadata in &lt;a href=&quot;https://github.com/intermine/neo4j/tree/dev/src/org/intermine/neo4j/metadata&quot;&gt;org.intermine.neo4j.metadata&lt;/a&gt; package.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Jun 2017 19:16:52 +0530</pubDate>
        <link>http://yashsharma.tech/blog/2017/metadata-in-neo4j/</link>
        <guid isPermaLink="true">http://yashsharma.tech/blog/2017/metadata-in-neo4j/</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>My GSoC Journey Begins</title>
        <description>&lt;p&gt;Hello! This summer started rather nicely for me as I was accepted into Google Summer of Code. The deadline to submit the proposals was 3rd April and results were declared on 4th May. I was anxiously waiting for the results during this whole period and the results made me super happy. I dreamt of this moment since last year. I will be working for &lt;a href=&quot;http://intermine.org/&quot;&gt;InterMine&lt;/a&gt; organisation throughout the summer.&lt;/p&gt;

&lt;h2&gt;InterMine&lt;/h2&gt;

&lt;p&gt;InterMine is an open source data warehouse built specifically for the integration and analysis of complex biological data. It is based out of University of Cambridge and was developed by the Micklem lab. Intermine currently uses PostgreSQL for storing the data which is a relational database.&lt;/p&gt;

&lt;h2&gt;My Project&lt;/h2&gt;

&lt;p&gt;In relational databases the data is stored in the form of tables. Now a days, Graph databases are gaining a lot of popularity. Graph databases store data in the form of nodes and relationships. InterMine needs to handle complex biological data and relations, so graph databases can be considered as a possible alternative to the current relational database. &lt;a href=&quot;http://neo4j.com/&quot;&gt;Neo4j&lt;/a&gt; is one such graph database which is Open Source, well documented and has a big community backing. The aim of my project is to prototype a RESTFul API querying Neo4j database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gsoc-project-screenshot.jpeg&quot; alt=&quot;Prototype a new RESTFul API querying Neo4j database&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ll be mentored by &lt;a href=&quot;https://github.com/sammyjava&quot;&gt;Sam Hokin&lt;/a&gt;, &lt;a href=&quot;https://github.com/vivekkrish&quot;&gt;Vivek Krishnakumar&lt;/a&gt; and &lt;a href=&quot;https://github.com/danielabutano&quot;&gt;Daniela Butano&lt;/a&gt; through the summer. I am excited to be a part of InterMine as a GSoC student. Looking forward to contributing to the project in best of my capacity.&lt;/p&gt;

&lt;p&gt;Congratulations to all other GSoC students and wish you a great summer ahead.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 May 2017 19:16:52 +0530</pubDate>
        <link>http://yashsharma.tech/blog/2017/gsoc-journey-begins/</link>
        <guid isPermaLink="true">http://yashsharma.tech/blog/2017/gsoc-journey-begins/</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>First Jekyll Blog!</title>
        <description>&lt;p&gt;Hello everyone! Welcome to my blog. It is based on Jekyll which is a static HTML generator. I will share exciting stuff soon. Stay tuned!&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Jan 2017 19:16:52 +0530</pubDate>
        <link>http://yashsharma.tech/blog/2017/first-jekyll-blog/</link>
        <guid isPermaLink="true">http://yashsharma.tech/blog/2017/first-jekyll-blog/</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
